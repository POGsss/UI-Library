// Math Class
@use "sass:math";

// Grid Basic Styling
$grid-column: 12;
$grid-gap: (
    "0": 0,
    "1": $margin,
    "2": $margin-double,
);
$layout-values: flex-start, flex-end, center, space-between, space-around;

// Base Grid Layout
.grid-container {
    width: 100%;
    max-width: map-get($breakpoint, "xl");
    margin: 0 auto;
    box-sizing: border-box;
}
.grid-row {
    display: flex;
    flex-flow: row wrap;
}

// Generating Grid Gap
@each $key, $value in $grid-gap {
    .grid-gap-#{$key} > * {
        padding: $value;
    }
    .grid-gap-#{$key} {
        margin-left: -$value;
        margin-right: -$value;
    }
}

// Generating Layout Class
@each $value in $layout-values {
    .justify-#{$value} {
        justify-content: $value;
    }
}

// Generating Column Class
@include xs {
    @for $i from 1 through $grid-column {
        .grid-col-#{$i}-xs {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-column);
        }
    }
}

@include sm {
    @for $i from 1 through $grid-column {
        .grid-col-#{$i}-sm {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-column);
        }
    }
}

@include md {
    @for $i from 1 through $grid-column {
        .grid-col-#{$i}-md {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-column);
        }
    }
}

@include lg {
    @for $i from 1 through $grid-column {
        .grid-col-#{$i}-lg {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-column);
        }
    }
}

@include xl {
    @for $i from 1 through $grid-column {
        .grid-col-#{$i}-xl {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-column);
        }
    }
}